#设定root日志的输出级别为INFO，appender为控制台输出stdout
log4j.rootCategory=INFO, stdout, file, errorfile

#控制台输出
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

#输出到文件
#为log4j.rootCategory添加名为file的appender，这样root日志就可以输出到logs/all.log文件中了
# root日志按天输出到不同的文件中去
log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file.file=logs/all.log
log4j.appender.file.DatePattern='.'yyyy-MM-dd
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

#分类输出
#日志量较多的时候，查找问题会非常困难，常用的手段就是对日志进行分类

#按不同package进行输出
# com.gdufs包下的日志配置
log4j.category.com.gdufs=DEBUG, gdufsfile
# com.gdufs 下的日志输出
log4j.appender.gdufsfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.gdufsfile.file=logs/my.log
log4j.appender.gdufsfile.DatePattern='.'yyyy-MM-dd
log4j.appender.gdufsfile.layout=org.apache.log4j.PatternLayout
log4j.appender.gdufsfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L ---- %m%n

#不同级别进行分类
#对ERROR级别输出到特定的日志文件中
log4j.logger.error=errorfile
# error日志输出
log4j.appender.errorfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.errorfile.file=logs/error.log
log4j.appender.errorfile.DatePattern='.'yyyy-MM-dd
log4j.appender.errorfile.Threshold = ERROR
log4j.appender.errorfile.layout=org.apache.log4j.PatternLayout
log4j.appender.errorfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c{1}:%L - %m%n

